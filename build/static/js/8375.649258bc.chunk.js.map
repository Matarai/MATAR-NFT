{"version":3,"file":"static/js/8375.649258bc.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/wallets/dist/url-a45219bd.browser.esm.js","../node_modules/@thirdweb-dev/wallets/evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js"],"sourcesContent":["import { getValidChainRPCs } from '@thirdweb-dev/chains';\n\nfunction isTwUrl(url) {\n  const host = new URL(url).hostname;\n  return host.endsWith(\".thirdweb.com\") || host.endsWith(\".thirdweb-dev.com\") || host === \"localhost\" || host === \"0.0.0.0\";\n}\nfunction getValidPublicRPCUrl(chain) {\n  return getValidChainRPCs(chain).map(rpc => {\n    try {\n      const url = new URL(rpc);\n      // remove client id from url\n      if (url.hostname.endsWith(\".thirdweb.com\")) {\n        url.pathname = \"\";\n        url.search = \"\";\n      }\n      return url.toString();\n    } catch (e) {\n      return rpc;\n    }\n  });\n}\n\nexport { getValidPublicRPCUrl as g, isTwUrl as i };\n","import { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { utils, BigNumber, providers, Signer, ethers, constants } from 'ethers';\nimport { i as isTwUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\nimport { EntryPoint__factory } from '@account-abstraction/contracts';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-d7c057bf.browser.esm.js';\nimport { A as ACCOUNT_CORE_ABI, E as ENTRYPOINT_ADDRESS } from '../../../../dist/constants-5a6f7f26.browser.esm.js';\nimport { getDynamicFeeData, ThirdwebSDK, LOCAL_NODE_PKEY, getChainProvider, getGasPrice } from '@thirdweb-dev/sdk';\nimport { Celo, CeloAlfajoresTestnet, CeloBaklavaTestnet } from '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nasync function hexlifyUserOp(op) {\n  const userOp = await utils.resolveProperties(op);\n  return Object.keys(userOp).map(key => {\n    let val = userOp[key];\n    if (typeof val !== \"string\" || !val.startsWith(\"0x\")) {\n      val = utils.hexValue(val);\n    }\n    return [key, val];\n  }).reduce((set, _ref) => {\n    let [k, v] = _ref;\n    return {\n      ...set,\n      [k]: v\n    };\n  }, {});\n}\n\n// v0.6 userOpHash calculation\nasync function getUserOpHashV06(userOp, entryPoint, chainId) {\n  const op = await utils.resolveProperties(userOp);\n  const hashedUserOp = {\n    sender: op.sender,\n    nonce: op.nonce,\n    initCodeHash: utils.keccak256(op.initCode),\n    callDataHash: utils.keccak256(op.callData),\n    callGasLimit: op.callGasLimit,\n    verificationGasLimit: op.verificationGasLimit,\n    preVerificationGas: op.preVerificationGas,\n    maxFeePerGas: op.maxFeePerGas,\n    maxPriorityFeePerGas: op.maxPriorityFeePerGas,\n    paymasterAndDataHash: utils.keccak256(op.paymasterAndData)\n  };\n  const userOpType = {\n    components: [{\n      type: \"address\",\n      name: \"sender\"\n    }, {\n      type: \"uint256\",\n      name: \"nonce\"\n    }, {\n      type: \"bytes32\",\n      name: \"initCodeHash\"\n    }, {\n      type: \"bytes32\",\n      name: \"callDataHash\"\n    }, {\n      type: \"uint256\",\n      name: \"callGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"verificationGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"preVerificationGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxFeePerGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxPriorityFeePerGas\"\n    }, {\n      type: \"bytes32\",\n      name: \"paymasterAndDataHash\"\n    }],\n    name: \"hashedUserOp\",\n    type: \"tuple\"\n  };\n  const encoded = utils.defaultAbiCoder.encode([userOpType], [{\n    ...hashedUserOp\n  }]);\n  // remove leading word (total length) and trailing word (zero-length signature)\n\n  const userOpHash = utils.keccak256(encoded);\n  const enc = utils.defaultAbiCoder.encode([\"bytes32\", \"address\", \"uint256\"], [userOpHash, entryPoint, chainId]);\n  return utils.keccak256(enc);\n}\nconst generateRandomUint192 = () => {\n  const rand1 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand2 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand3 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand4 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand5 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand6 = BigInt(Math.floor(Math.random() * 0x100000000));\n  return rand1 << BigInt(160) | rand2 << BigInt(128) | rand3 << BigInt(96) | rand4 << BigInt(64) | rand5 << BigInt(32) | rand6;\n};\nconst randomNonce = () => {\n  let hexString = generateRandomUint192().toString(16);\n  if (hexString.length % 2 !== 0) {\n    hexString = \"0\" + hexString;\n  }\n  hexString = \"0x\" + hexString;\n  return BigNumber.from(utils.concat([hexString, \"0x0000000000000000\"]));\n};\n\n/**\n * an API to external a UserOperation with paymaster info\n */\nclass PaymasterAPI {}\n\nvar pkg = {\n\tname: \"@thirdweb-dev/wallets\",\n\tversion: \"2.4.3\",\n\tmain: \"dist/thirdweb-dev-wallets.cjs.js\",\n\tmodule: \"dist/thirdweb-dev-wallets.esm.js\",\n\tbrowser: {\n\t\t\"./dist/thirdweb-dev-wallets.esm.js\": \"./dist/thirdweb-dev-wallets.browser.esm.js\"\n\t},\n\texports: {\n\t\t\".\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./dist/thirdweb-dev-wallets.browser.esm.js\",\n\t\t\t\t\"default\": \"./dist/thirdweb-dev-wallets.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./dist/thirdweb-dev-wallets.cjs.js\"\n\t\t},\n\t\t\"./evm\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/dist/thirdweb-dev-wallets-evm.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/dist/thirdweb-dev-wallets-evm.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/dist/thirdweb-dev-wallets-evm.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/okx\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/base\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/safe\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/async\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/frame\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/magic\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/rabby\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/rabby/dist/thirdweb-dev-wallets-evm-wallets-rabby.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/rabby/dist/thirdweb-dev-wallets-evm-wallets-rabby.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/rabby/dist/thirdweb-dev-wallets-evm-wallets-rabby.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/trust\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/blocto\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/coin98\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/coin98/dist/thirdweb-dev-wallets-evm-wallets-coin98.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/coin98/dist/thirdweb-dev-wallets-evm-wallets-coin98.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/coin98/dist/thirdweb-dev-wallets-evm-wallets-coin98.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/engine\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/engine/dist/thirdweb-dev-wallets-evm-wallets-engine.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/engine/dist/thirdweb-dev-wallets-evm-wallets-engine.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/engine/dist/thirdweb-dev-wallets-evm-wallets-engine.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/ethers\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/onekey\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/onekey/dist/thirdweb-dev-wallets-evm-wallets-onekey.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/onekey/dist/thirdweb-dev-wallets-evm-wallets-onekey.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/onekey/dist/thirdweb-dev-wallets-evm-wallets-onekey.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/signer\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/zerion\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/aws-kms\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/gcp-kms\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/phantom\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/abstract\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/injected\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/metamask\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/core-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/core-wallet/dist/thirdweb-dev-wallets-evm-wallets-core-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/core-wallet/dist/thirdweb-dev-wallets-evm-wallets-core-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/core-wallet/dist/thirdweb-dev-wallets-evm-wallets-core-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/private-key\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/okx\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/local-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/paper-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/smart-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/safe\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/frame\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/magic\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/paper\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/rabby\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/rabby/dist/thirdweb-dev-wallets-evm-connectors-rabby.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/rabby/dist/thirdweb-dev-wallets-evm-connectors-rabby.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/rabby/dist/thirdweb-dev-wallets-evm-connectors-rabby.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/trust\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/rainbow-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/wallet-connect\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/blocto\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/coin98\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/onekey\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/onekey/dist/thirdweb-dev-wallets-evm-connectors-onekey.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/onekey/dist/thirdweb-dev-wallets-evm-connectors-onekey.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/onekey/dist/thirdweb-dev-wallets-evm-connectors-onekey.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/signer\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/zerion\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/coinbase-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/embedded-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/phantom\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/rainbow\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/injected\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/metamask\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/local-wallet-node\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/wallet-connect-v1\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/crypto-defi-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-wallets-crypto-defi-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-wallets-crypto-defi-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-wallets-crypto-defi-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/aws-secrets-manager\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/core-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/core-wallet/dist/thirdweb-dev-wallets-evm-connectors-core-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/core-wallet/dist/thirdweb-dev-wallets-evm-connectors-core-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/core-wallet/dist/thirdweb-dev-wallets-evm-connectors-core-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/local-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/smart-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/wallet-connect\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/coinbase-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/embedded-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/wallets/token-bound-smart-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/wallet-connect-v1\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/crypto-defi-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/token-bound-smart-wallet\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.cjs.js\"\n\t\t},\n\t\t\"./evm/connectors/embedded-wallet/implementations\": {\n\t\t\tmodule: {\n\t\t\t\tbrowser: \"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.browser.esm.js\",\n\t\t\t\t\"default\": \"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.esm.js\"\n\t\t\t},\n\t\t\t\"default\": \"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.cjs.js\"\n\t\t},\n\t\t\"./package.json\": \"./package.json\"\n\t},\n\ttypes: \"dist/thirdweb-dev-wallets.cjs.d.ts\",\n\trepository: \"https://github.com/thirdweb-dev/js/tree/main/packages/wallets\",\n\tlicense: \"Apache-2.0\",\n\tbugs: {\n\t\turl: \"https://github.com/thirdweb-dev/js/issues\"\n\t},\n\tauthor: \"thirdweb eng <eng@thirdweb.com>\",\n\tfiles: [\n\t\t\"dist/\",\n\t\t\"evm/\"\n\t],\n\tpreconstruct: {\n\t\tentrypoints: [\n\t\t\t\"index.ts\",\n\t\t\t\"evm/index.ts\",\n\t\t\t\"evm/connectors/*/index.ts\",\n\t\t\t\"evm/connectors/embedded-wallet/implementations/index.ts\",\n\t\t\t\"evm/wallets/**\"\n\t\t],\n\t\texports: {\n\t\t\tenvConditions: [\n\t\t\t\t\"browser\"\n\t\t\t]\n\t\t}\n\t},\n\tsideEffects: false,\n\tdependencies: {\n\t\t\"@account-abstraction/contracts\": \"^0.5.0\",\n\t\t\"@blocto/sdk\": \"^0.5.4\",\n\t\t\"@coinbase/wallet-sdk\": \"^3.7.1\",\n\t\t\"@google-cloud/kms\": \"3.0.1\",\n\t\t\"@magic-ext/connect\": \"^6.7.2\",\n\t\t\"@magic-ext/oauth\": \"^7.6.2\",\n\t\t\"@magic-sdk/provider\": \"^13.6.2\",\n\t\t\"@metamask/eth-sig-util\": \"^4.0.0\",\n\t\t\"@paperxyz/embedded-wallet-service-sdk\": \"^1.2.5\",\n\t\t\"@paperxyz/sdk-common-utilities\": \"^0.1.0\",\n\t\t\"@safe-global/safe-core-sdk\": \"^3.3.4\",\n\t\t\"@safe-global/safe-ethers-adapters\": \"0.1.0-alpha.17\",\n\t\t\"@safe-global/safe-ethers-lib\": \"^1.9.4\",\n\t\t\"@thirdweb-dev/chains\": \"workspace:*\",\n\t\t\"@thirdweb-dev/contracts-js\": \"workspace:*\",\n\t\t\"@thirdweb-dev/crypto\": \"workspace:*\",\n\t\t\"@thirdweb-dev/sdk\": \"workspace:*\",\n\t\t\"@walletconnect/core\": \"^2.9.1\",\n\t\t\"@walletconnect/ethereum-provider\": \"^2.9.1\",\n\t\t\"@walletconnect/jsonrpc-utils\": \"^1.0.8\",\n\t\t\"@walletconnect/modal\": \"^2.6.1\",\n\t\t\"@walletconnect/types\": \"^2.9.1\",\n\t\t\"@walletconnect/utils\": \"^2.10.2\",\n\t\t\"@walletconnect/web3wallet\": \"^1.8.7\",\n\t\t\"asn1.js\": \"5.4.1\",\n\t\t\"bn.js\": \"5.2.0\",\n\t\tbuffer: \"^6.0.3\",\n\t\t\"eth-provider\": \"^0.13.6\",\n\t\t\"ethereumjs-util\": \"^7.1.3\",\n\t\teventemitter3: \"^5.0.1\",\n\t\t\"key-encoder\": \"2.0.3\",\n\t\t\"magic-sdk\": \"^13.6.2\",\n\t\t\"web3-core\": \"1.5.2\"\n\t},\n\tpeerDependencies: {\n\t\t\"@aws-sdk/client-secrets-manager\": \"^3.256.0\",\n\t\t\"@noble/ed25519\": \"^1.7.1\",\n\t\tbs58: \"^5.0.0\",\n\t\tethers: \"^5.7.2\",\n\t\t\"ethers-aws-kms-signer\": \"^1.3.2\",\n\t\ttweetnacl: \"^1.0.3\"\n\t},\n\tpeerDependenciesMeta: {\n\t\ttweetnacl: {\n\t\t\toptional: true\n\t\t},\n\t\t\"@aws-sdk/client-secrets-manager\": {\n\t\t\toptional: true\n\t\t},\n\t\t\"ethers-aws-kms-signer\": {\n\t\t\toptional: true\n\t\t},\n\t\t\"@noble/ed25519\": {\n\t\t\toptional: true\n\t\t},\n\t\tbs58: {\n\t\t\toptional: true\n\t\t},\n\t\tethers: {\n\t\t\toptional: true\n\t\t}\n\t},\n\tdevDependencies: {\n\t\t\"@aws-sdk/client-secrets-manager\": \"^3.378.0\",\n\t\t\"@babel/plugin-transform-class-properties\": \"^7.23.3\",\n\t\t\"@babel/plugin-transform-flow-strip-types\": \"^7.23.3\",\n\t\t\"@babel/plugin-transform-private-methods\": \"^7.23.3\",\n\t\t\"@microsoft/api-extractor\": \"^7.36.3\",\n\t\t\"@noble/ed25519\": \"^1.7.1\",\n\t\t\"@nomiclabs/hardhat-ethers\": \"^2.2.3\",\n\t\t\"@preconstruct/cli\": \"2.7.0\",\n\t\t\"@thirdweb-dev/tsconfig\": \"workspace:*\",\n\t\t\"@types/bn.js\": \"^5.1.1\",\n\t\t\"@types/jest\": \"^29.5.3\",\n\t\tabitype: \"^0.2.5\",\n\t\t\"babel-plugin-transform-inline-environment-variables\": \"^0.4.4\",\n\t\tbs58: \"^5.0.0\",\n\t\t\"cross-env\": \"^7.0.3\",\n\t\t\"eslint-config-thirdweb\": \"workspace:*\",\n\t\t\"eslint-plugin-better-tree-shaking\": \"0.0.4\",\n\t\t\"eslint-plugin-tsdoc\": \"^0.2.16\",\n\t\t\"ethereum-provider\": \"^0.7.7\",\n\t\tethers: \"^5.7.2\",\n\t\t\"ethers-aws-kms-signer\": \"^1.3.2\",\n\t\thardhat: \"^2.17.0\",\n\t\tjest: \"^29.6.2\",\n\t\trimraf: \"^3.0.2\",\n\t\t\"ts-jest\": \"^29.1.1\",\n\t\ttweetnacl: \"^1.0.3\",\n\t\t\"typedoc-gen\": \"workspace:*\",\n\t\ttypescript: \"^5.3.3\"\n\t},\n\tscripts: {\n\t\tformat: \"prettier --write 'src/**/*'\",\n\t\tlint: \"eslint src/ && bunx publint --strict --level warning\",\n\t\tfix: \"eslint src/ --fix\",\n\t\tclean: \"rm -rf dist/\",\n\t\tbuild: \"tsc && cross-env THIRDWEB_EWS_SDK_VERSION=$npm_package_version preconstruct build\",\n\t\t\"preconstruct:fix\": \"preconstruct fix\",\n\t\tpush: \"yalc push\",\n\t\ttypedoc: \"node scripts/typedoc.mjs\",\n\t\ttest: \"jest\"\n\t},\n\tengines: {\n\t\tnode: \">=18\"\n\t},\n\tjest: {\n\t\ttestTimeout: 30000\n\t}\n};\n\nconst DEBUG = false; // TODO set as public flag\nclass HttpRpcClient {\n  constructor(bundlerUrl, entryPointAddress, chainId, clientId, secretKey) {\n    this.bundlerUrl = bundlerUrl;\n    this.entryPointAddress = entryPointAddress;\n    this.chainId = chainId;\n    const headers = {};\n    if (isTwUrl(this.bundlerUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (secretKey) {\n        headers[\"x-secret-key\"] = secretKey;\n      } else if (clientId) {\n        headers[\"x-client-id\"] = clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      headers[\"x-sdk-version\"] = pkg.version;\n      headers[\"x-sdk-name\"] = pkg.name;\n      headers[\"x-sdk-platform\"] = bundleId ? \"react-native\" : window.bridge !== undefined ? \"webGL\" : \"browser\" ;\n    }\n    this.userOpJsonRpcProvider = new providers.JsonRpcProvider({\n      url: this.bundlerUrl,\n      headers\n    }, {\n      name: \"Connected bundler network\",\n      chainId\n    });\n    this.initializing = this.validateChainId();\n  }\n  async validateChainId() {\n    // validate chainId is in sync with expected chainid\n    const chain = await this.userOpJsonRpcProvider.send(\"eth_chainId\", []);\n    const bundlerChain = parseInt(chain);\n    if (bundlerChain !== this.chainId) {\n      throw new Error(`bundler ${this.bundlerUrl} is on chainId ${bundlerChain}, but provider is on chainId ${this.chainId}`);\n    }\n  }\n\n  /**\n   * send a UserOperation to the bundler\n   * @param userOp1 - The UserOperation to send\n   * @returns userOpHash the id of this operation, for getUserOperationTransaction\n   */\n  async sendUserOpToBundler(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp1);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_sendUserOperation\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_sendUserOperation\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async estimateUserOpGas(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp1);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_estimateUserOperationGas\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_estimateUserOperationGas\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async printUserOperation(method, _ref) {\n    {\n      return;\n    }\n  }\n}\n\nclass VerifyingPaymasterAPI extends PaymasterAPI {\n  constructor(paymasterUrl, entryPoint, clientId, secretKey) {\n    super();\n    this.paymasterUrl = paymasterUrl;\n    this.entryPoint = entryPoint;\n    this.clientId = clientId;\n    this.secretKey = secretKey;\n  }\n  async getPaymasterAndData(userOp) {\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if (isTwUrl(this.paymasterUrl)) {\n      if (this.secretKey && this.clientId) {\n        throw new Error(\"Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.\");\n      }\n      if (this.secretKey) {\n        headers[\"x-secret-key\"] = this.secretKey;\n      } else if (this.clientId) {\n        headers[\"x-client-id\"] = this.clientId;\n        if (typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis) {\n          headers[\"x-bundle-id\"] = globalThis.APP_BUNDLE_ID;\n        }\n      }\n\n      // Dashboard token.\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token.\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n    }\n\n    // Ask the paymaster to sign the transaction and return a valid paymasterAndData value.\n    const response = await fetch(this.paymasterUrl, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: 1,\n        method: \"pm_sponsorUserOperation\",\n        params: [await hexlifyUserOp(userOp), this.entryPoint]\n      })\n    });\n    const res = await response.json();\n    if (!response.ok) {\n      const error = res.error || response.statusText;\n      const code = res.code || \"UNKNOWN\";\n      throw new Error(`Paymaster error: ${error}\nStatus: ${response.status}\nCode: ${code}`);\n    }\n    if (DEBUG) {\n      console.debug(\"Paymaster result:\", res);\n    }\n    if (res.result) {\n      // some paymasters return a string, some return an object with more data\n      if (typeof res.result === \"string\") {\n        return {\n          paymasterAndData: res.result\n        };\n      } else {\n        return res.result;\n      }\n    } else {\n      const error = res.error?.message || res.error || response.statusText || \"unknown error\";\n      throw new Error(`Paymaster error from ${this.paymasterUrl}: ${error}`);\n    }\n  }\n}\nconst getVerifyingPaymaster = (paymasterUrl, entryPoint, clientId, secretKey) => new VerifyingPaymasterAPI(paymasterUrl, entryPoint, clientId, secretKey);\n\n/**\n * This class encapsulates Ethers.js listener function and necessary UserOperation details to\n * discover a TransactionReceipt for the operation.\n *\n * TODO refactor this to a simple event listener on the entry point\n */\nclass UserOperationEventListener {\n  constructor(resolve, reject, entryPoint, sender, userOpHash, nonce, timeout) {\n    this.resolve = resolve;\n    this.reject = reject;\n    this.entryPoint = entryPoint;\n    this.sender = sender;\n    this.userOpHash = userOpHash;\n    this.nonce = nonce;\n    this.timeout = timeout;\n    _defineProperty(this, \"resolved\", false);\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.boundLisener = this.listenerCallback.bind(this);\n  }\n  start() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    const filter = this.entryPoint.filters.UserOperationEvent(this.userOpHash);\n    // listener takes time... first query directly:\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    setTimeout(async () => {\n      const res = await this.entryPoint.queryFilter(filter, -10); // look at last 10 blocks\n      if (res.length > 0) {\n        void this.listenerCallback(res[0]);\n      } else {\n        this.entryPoint.once(filter, this.boundLisener);\n      }\n    }, 100);\n  }\n  stop() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.entryPoint.off(\"UserOperationEvent\", this.boundLisener);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async listenerCallback() {\n    for (var _len = arguments.length, param = new Array(_len), _key = 0; _key < _len; _key++) {\n      param[_key] = arguments[_key];\n    }\n    // TODO clean this up..\n    // eslint-disable-next-line prefer-rest-params\n    const event = arguments[arguments.length - 1];\n    if (!event.args) {\n      console.error(\"got event without args\", event);\n      return;\n    }\n    // TODO: can this happen? we register to event by userOpHash..\n    if (event.args.userOpHash !== this.userOpHash) {\n      console.log(`== event with wrong userOpHash: sender/nonce: event.${event.args.sender}@${event.args.nonce.toString()}!= userOp.${this.sender}@${parseInt(this.nonce?.toString())}`);\n      return;\n    }\n    const transactionReceipt = await event.getTransactionReceipt();\n\n    // before returning the receipt, update the status from the event.\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (!event.args.success) {\n      await this.extractFailureReason(transactionReceipt);\n    }\n    this.stop();\n    this.resolve(transactionReceipt);\n    this.resolved = true;\n  }\n  async extractFailureReason(receipt) {\n    receipt.status = 0;\n    const revertReasonEvents = await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash, this.sender), receipt.blockHash);\n    if (revertReasonEvents[0]) {\n      let message = revertReasonEvents[0].args.revertReason;\n      if (message.startsWith(\"0x08c379a0\")) {\n        // Error(string)\n        message = utils.defaultAbiCoder.decode([\"string\"], \"0x\" + message.substring(10)).toString();\n      }\n      this.reject(new Error(`UserOp failed with reason: ${message}`));\n    }\n  }\n}\n\nclass ERC4337EthersSigner extends Signer {\n  // TODO: we have 'erc4337provider', remove shared dependencies or avoid two-way reference\n  constructor(config, originalSigner, erc4337provider, httpRpcClient, smartAccountAPI) {\n    super();\n    utils.defineReadOnly(this, \"provider\", erc4337provider);\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.erc4337provider = erc4337provider;\n    this.httpRpcClient = httpRpcClient;\n    this.smartAccountAPI = smartAccountAPI;\n  }\n  // This one is called by Contract. It signs the request and passes in to Provider to be sent.\n  async sendTransaction(transaction, options) {\n    const tx = await ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce,\n      maxFeePerGas: tx.maxFeePerGas,\n      maxPriorityFeePerGas: tx.maxPriorityFeePerGas\n    }, options);\n    const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\n    const transactionResponse = await this.erc4337provider.constructUserOpTransactionResponse(userOperation);\n    try {\n      await this.httpRpcClient.sendUserOpToBundler(userOperation);\n    } catch (error) {\n      throw this.unwrapError(error);\n    }\n    // TODO: handle errors - transaction that is \"rejected\" by bundler is _not likely_ to ever resolve its \"wait()\"\n    return transactionResponse;\n  }\n  unwrapError(errorIn) {\n    try {\n      let errorMsg = \"Unknown Error\";\n      if (errorIn.error) {\n        errorMsg = `The bundler has failed to include UserOperation in a batch: ${errorIn.error}`;\n      } else if (errorIn.body && typeof errorIn.body === \"string\") {\n        const errorBody = JSON.parse(errorIn.body);\n        const errorStatus = errorIn.status || \"UNKNOWN\";\n        const errorCode = errorBody?.code || \"UNKNOWN\";\n        let failedOpMessage = errorBody?.error?.message || errorBody?.error?.data || errorBody?.error || errorIn.reason;\n        if (failedOpMessage?.includes(\"FailedOp\")) {\n          let paymasterInfo = \"\";\n          // TODO: better error extraction methods will be needed\n          const matched = failedOpMessage.match(/FailedOp\\((.*)\\)/);\n          if (matched) {\n            const split = matched[1].split(\",\");\n            paymasterInfo = `(paymaster address: ${split[1]})`;\n            failedOpMessage = split[2];\n          }\n          errorMsg = `The bundler has failed to include UserOperation in a batch: ${failedOpMessage} ${paymasterInfo}`;\n        } else {\n          errorMsg = `RPC error: ${failedOpMessage}\nStatus: ${errorStatus}\nCode: ${errorCode}`;\n        }\n      }\n      const error = new Error(errorMsg);\n      error.stack = errorIn.stack;\n      return error;\n    } catch (error) {}\n    return errorIn;\n  }\n  async verifyAllNecessaryFields(transactionRequest) {\n    if (!transactionRequest.to) {\n      throw new Error(\"Missing call target\");\n    }\n    if (!transactionRequest.data && !transactionRequest.value) {\n      // TBD: banning no-op UserOps seems to make sense on provider level\n      throw new Error(\"Missing call data or value\");\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  connect(provider) {\n    throw new Error(\"changing providers is not supported\");\n  }\n  async getAddress() {\n    if (!this.address) {\n      this.address = await this.erc4337provider.getSenderAccountAddress();\n    }\n    return this.address;\n  }\n  async signMessage(message) {\n    const isNotDeployed = await this.smartAccountAPI.checkAccountPhantom();\n    if (isNotDeployed) {\n      console.log(\"Account contract not deployed yet. Deploying account before signing message\");\n      const tx = await this.sendTransaction({\n        to: await this.getAddress(),\n        data: \"0x\"\n      });\n      await tx.wait();\n    }\n    return await this.originalSigner.signMessage(message);\n  }\n  async signTransaction(transaction, options) {\n    const tx = await ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce\n    }, options);\n    const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\n    const userOpString = JSON.stringify(await hexlifyUserOp(userOperation));\n    return userOpString;\n  }\n}\n\nclass ERC4337EthersProvider extends providers.BaseProvider {\n  constructor(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, smartAccountAPI) {\n    super({\n      name: \"ERC-4337 Custom Network\",\n      chainId\n    });\n    this.chainId = chainId;\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.originalProvider = originalProvider;\n    this.httpRpcClient = httpRpcClient;\n    this.entryPoint = entryPoint;\n    this.smartAccountAPI = smartAccountAPI;\n    this.signer = new ERC4337EthersSigner(config, originalSigner, this, httpRpcClient, smartAccountAPI);\n  }\n  getSigner() {\n    return this.signer;\n  }\n  async perform(method, params) {\n    if (method === \"sendTransaction\" || method === \"getTransactionReceipt\") {\n      // TODO: do we need 'perform' method to be available at all?\n      // there is nobody out there to use it for ERC-4337 methods yet, we have nothing to override in fact.\n      throw new Error(\"Should not get here. Investigate.\");\n    }\n    if (method === \"estimateGas\") {\n      // gas estimation does nothing at this layer, sendTransaction will do the gas estimation for the userOp\n      return BigNumber.from(500000);\n    }\n    return await this.originalProvider.perform(method, params);\n  }\n  async getTransaction(transactionHash) {\n    // TODO\n    return await super.getTransaction(transactionHash);\n  }\n  async getTransactionReceipt(transactionHash) {\n    const userOpHash = await transactionHash;\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      new UserOperationEventListener(resolve, reject, this.entryPoint, sender, userOpHash).start();\n    });\n  }\n  async getSenderAccountAddress() {\n    return await this.smartAccountAPI.getAccountAddress();\n  }\n  async waitForTransaction(transactionHash, confirmations, timeout) {\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      const listener = new UserOperationEventListener(resolve, reject, this.entryPoint, sender, transactionHash, undefined, timeout);\n      listener.start();\n    });\n  }\n\n  // fabricate a response in a format usable by ethers users...\n  async constructUserOpTransactionResponse(userOp1) {\n    const userOp = await utils.resolveProperties(userOp1);\n    const userOpHash = await this.smartAccountAPI.getUserOpHash(userOp);\n    const waitForUserOp = async () => await new Promise((resolve, reject) => {\n      new UserOperationEventListener(resolve, reject, this.entryPoint, userOp.sender, userOpHash, userOp.nonce).start();\n    });\n    return {\n      hash: userOpHash,\n      confirmations: 0,\n      from: userOp.sender,\n      nonce: 0,\n      // not the real nonce, but good enough for this purpose\n      gasLimit: BigNumber.from(userOp.callGasLimit),\n      // ??\n      value: BigNumber.from(0),\n      data: utils.hexValue(userOp.callData),\n      // should extract the actual called method from this \"execFromEntryPoint()\" call\n      chainId: this.chainId,\n      wait: async confirmations => {\n        const transactionReceipt = await waitForUserOp();\n        if (userOp.initCode.length !== 0) {\n          // checking if the wallet has been deployed by the transaction; it must be if we are here\n          await this.smartAccountAPI.checkAccountPhantom();\n        }\n        return transactionReceipt;\n      }\n    };\n  }\n  async detectNetwork() {\n    return this.originalProvider.detectNetwork();\n  }\n}\n\n/**\n * wrap an existing provider to tunnel requests through Account Abstraction.\n * @param originalProvider - The normal provider\n * @param config - see {@link ClientConfig} for more info\n * @param originalSigner - use this signer as the owner. of this wallet. By default, use the provider's signer\n */\nfunction create4337Provider(config, accountApi, originalProvider, chainId) {\n  const entryPoint = EntryPoint__factory.connect(config.entryPointAddress, originalProvider);\n  const httpRpcClient = new HttpRpcClient(config.bundlerUrl, config.entryPointAddress, chainId, config.clientId, config.secretKey);\n  return new ERC4337EthersProvider(chainId, config, config.localSigner, originalProvider, httpRpcClient, entryPoint, accountApi);\n}\n\nconst DUMMY_SIGNATURE = \"0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\";\n\n/**\n * Base class for all Smart Wallet ERC-4337 Clients to implement.\n * Subclass should inherit 5 methods to support a specific wallet contract:\n *\n * - getAccountInitCode - return the value to put into the \"initCode\" field, if the account is not yet deployed. should create the account instance using a factory contract.\n * - getNonce - return current account's nonce value\n * - encodeExecute - encode the call from entryPoint through our account to the target contract.\n * - signUserOpHash - sign the hash of a UserOp.\n *\n * The user can use the following APIs:\n * - createUnsignedUserOp - given \"target\" and \"calldata\", fill userOp to perform that operation from the account.\n * - createSignedUserOp - helper to call the above createUnsignedUserOp, and then extract the userOpHash and sign it\n */\nclass BaseAccountAPI {\n  // entryPoint connected to \"zero\" address. allowed to make static calls (e.g. to getSenderAddress)\n\n  /**\n   * base constructor.\n   * subclass SHOULD add parameters that define the owner (signer) of this wallet\n   */\n  constructor(params) {\n    _defineProperty(this, \"isPhantom\", true);\n    this.provider = params.provider;\n    this.entryPointAddress = params.entryPointAddress;\n    this.accountAddress = params.accountAddress;\n    this.paymasterAPI = params.paymasterAPI;\n    this.gasless = params.gasless;\n\n    // factory \"connect\" define the contract address. the contract \"connect\" defines the \"from\" address.\n    this.entryPointView = EntryPoint__factory.connect(params.entryPointAddress, params.provider).connect(ethers.constants.AddressZero);\n  }\n\n  /**\n   * return the value to put into the \"initCode\" field, if the contract is not yet deployed.\n   * this value holds the \"factory\" address, followed by this account's information\n   */\n\n  /**\n   * return current account's nonce.\n   */\n\n  /**\n   * encode the call from entryPoint through our account to the target contract.\n   * @param target - The target contract address\n   * @param value - The value to send to the target contract\n   * @param data - The calldata to send to the target contract\n   */\n\n  /**\n   * sign a userOp's hash (userOpHash).\n   * @param userOpHash - The hash to sign\n   */\n\n  /**\n   * calculate the account address even before it is deployed\n   */\n\n  /**\n   * check if the contract is already deployed.\n   */\n  async checkAccountPhantom() {\n    if (!this.isPhantom) {\n      // already deployed. no need to check anymore.\n      return this.isPhantom;\n    }\n    const senderAddressCode = await this.provider.getCode(this.getAccountAddress());\n    if (senderAddressCode.length > 2) {\n      this.isPhantom = false;\n    }\n    return this.isPhantom;\n  }\n\n  /**\n   * return initCode value to into the UserOp.\n   * (either deployment code, or empty hex if contract already deployed)\n   */\n  async getInitCode() {\n    if (await this.checkAccountPhantom()) {\n      return await this.getAccountInitCode();\n    }\n    return \"0x\";\n  }\n\n  /**\n   * return maximum gas used for verification.\n   * NOTE: createUnsignedUserOp will add to this value the cost of creation, if the contract is not yet created.\n   */\n  async getVerificationGasLimit() {\n    return 100000;\n  }\n\n  /**\n   * return userOpHash for signing.\n   * This value matches entryPoint.getUserOpHash (calculated off-chain, to avoid a view call)\n   * @param userOp - userOperation, (signature field ignored)\n   */\n  async getUserOpHash(userOp) {\n    const chainId = await this.provider.getNetwork().then(net => net.chainId);\n    return getUserOpHashV06(userOp, this.entryPointAddress, chainId);\n  }\n\n  /**\n   * return the account's address.\n   * this value is valid even before deploying the contract.\n   */\n  async getAccountAddress() {\n    if (!this.senderAddress) {\n      if (this.accountAddress) {\n        this.senderAddress = this.accountAddress;\n      } else {\n        this.senderAddress = await this.getCounterFactualAddress();\n      }\n    }\n    return this.senderAddress;\n  }\n  async estimateCreationGas(initCode) {\n    if (!initCode || initCode === \"0x\") {\n      return 0;\n    }\n    const deployerAddress = initCode.substring(0, 42);\n    const deployerCallData = \"0x\" + initCode.substring(42);\n    return await this.provider.estimateGas({\n      to: deployerAddress,\n      data: deployerCallData\n    });\n  }\n  async createUnsignedUserOp(httpRpcClient, info, options) {\n    // construct the userOp without gasLimit or preVerifictaionGas\n    const initCode = await this.getInitCode();\n    const value = parseNumber(info.value) ?? BigNumber.from(0);\n    const callData = options?.batchData ? info.data : await this.prepareExecute(info.target, value, info.data).then(tx => tx.encode());\n    let {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = info;\n    if (!maxFeePerGas || !maxPriorityFeePerGas) {\n      const feeData = await getDynamicFeeData(this.provider);\n      if (!maxPriorityFeePerGas) {\n        maxPriorityFeePerGas = feeData.maxPriorityFeePerGas ?? undefined;\n      }\n      if (!maxFeePerGas) {\n        maxFeePerGas = feeData.maxFeePerGas ?? undefined;\n        const network = await this.provider.getNetwork();\n        const chainId = network.chainId;\n        if (chainId === Celo.chainId || chainId === CeloAlfajoresTestnet.chainId || chainId === CeloBaklavaTestnet.chainId) {\n          maxPriorityFeePerGas = maxFeePerGas;\n        }\n      }\n    }\n    if (!maxFeePerGas || !maxPriorityFeePerGas) {\n      throw new Error(\"maxFeePerGas or maxPriorityFeePerGas could not be calculated, please pass them explicitely\");\n    }\n    const [sender, nonce] = await Promise.all([this.getAccountAddress(), info.nonce ? Promise.resolve(info.nonce) : this.getNonce()]);\n    const partialOp = {\n      sender,\n      nonce,\n      initCode,\n      callData,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      callGasLimit: BigNumber.from(1000000),\n      verificationGasLimit: BigNumber.from(1000000),\n      preVerificationGas: BigNumber.from(1000000),\n      paymasterAndData: \"0x\",\n      signature: DUMMY_SIGNATURE\n    };\n\n    // paymaster data + maybe used for estimation as well\n    const gasless = options?.gasless !== undefined ? options.gasless : this.gasless;\n    if (gasless) {\n      const paymasterResult = await this.paymasterAPI.getPaymasterAndData(partialOp);\n      const paymasterAndData = paymasterResult.paymasterAndData;\n      if (paymasterAndData && paymasterAndData !== \"0x\") {\n        partialOp.paymasterAndData = paymasterAndData;\n      }\n      // paymaster can have the gas limits in the response\n      if (paymasterResult.callGasLimit && paymasterResult.verificationGasLimit && paymasterResult.preVerificationGas) {\n        partialOp.callGasLimit = BigNumber.from(paymasterResult.callGasLimit);\n        partialOp.verificationGasLimit = BigNumber.from(paymasterResult.verificationGasLimit);\n        partialOp.preVerificationGas = BigNumber.from(paymasterResult.preVerificationGas);\n      } else {\n        // otherwise fallback to bundler for gas limits\n        let estimates;\n        try {\n          estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n        } catch (error) {\n          throw this.unwrapBundlerError(error);\n        }\n        partialOp.callGasLimit = BigNumber.from(estimates.callGasLimit);\n        partialOp.verificationGasLimit = BigNumber.from(estimates.verificationGasLimit);\n        partialOp.preVerificationGas = BigNumber.from(estimates.preVerificationGas);\n        // need paymaster to re-sign after estimates\n        const paymasterResult2 = await this.paymasterAPI.getPaymasterAndData(partialOp);\n        if (paymasterResult2.paymasterAndData && paymasterResult2.paymasterAndData !== \"0x\") {\n          partialOp.paymasterAndData = paymasterResult2.paymasterAndData;\n        }\n      }\n    } else {\n      // query bundler for gas limits\n      let estimates;\n      try {\n        estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n      } catch (error) {\n        throw this.unwrapBundlerError(error);\n      }\n      partialOp.callGasLimit = BigNumber.from(estimates.callGasLimit);\n      partialOp.verificationGasLimit = BigNumber.from(estimates.verificationGasLimit);\n      partialOp.preVerificationGas = BigNumber.from(estimates.preVerificationGas);\n    }\n    return {\n      ...partialOp,\n      signature: \"\"\n    };\n  }\n\n  /**\n   * Sign the filled userOp.\n   * @param userOp - The UserOperation to sign (with signature field ignored)\n   */\n  async signUserOp(userOp) {\n    const userOpHash = await this.getUserOpHash(userOp);\n    const signature = await this.signUserOpHash(userOpHash);\n    return {\n      ...userOp,\n      signature\n    };\n  }\n\n  /**\n   * get the transaction that has this userOpHash mined, or null if not found\n   * @param userOpHash - returned by sendUserOpToBundler (or by getUserOpHash..)\n   * @param timeout - stop waiting after this timeout\n   * @param interval - time to wait between polls.\n   * @returns The transactionHash this userOp was mined, or null if not found.\n   */\n  async getUserOpReceipt(userOpHash) {\n    let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30000;\n    let interval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2000;\n    const endtime = Date.now() + timeout;\n    while (Date.now() < endtime) {\n      const events = await this.entryPointView.queryFilter(this.entryPointView.filters.UserOperationEvent(userOpHash));\n      if (events[0]) {\n        return events[0].transactionHash;\n      }\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    return null;\n  }\n  unwrapBundlerError(error) {\n    const message = error?.error?.message || error.error || error.message || error;\n    return new Error(message);\n  }\n}\nfunction parseNumber(a) {\n  if (!a || a === \"\") {\n    return null;\n  }\n  return BigNumber.from(a.toString());\n}\n\nclass AccountAPI extends BaseAccountAPI {\n  constructor(params, originalProvider) {\n    super({\n      ...params,\n      provider: originalProvider\n    });\n    this.params = params;\n    // Technically dont need the signer here, but we need to encode/estimate gas with it so a signer is required\n    // We don't want to use the localSigner directly since it might be connected to another chain\n    // so we just use the public hardhat pkey instead\n    this.sdk = ThirdwebSDK.fromPrivateKey(LOCAL_NODE_PKEY, params.chain, {\n      clientId: params.clientId,\n      secretKey: params.secretKey,\n      // @ts-expect-error expected chain type error\n      supportedChains: typeof params.chain === \"object\" ? [params.chain] : undefined\n    });\n  }\n  async getChainId() {\n    return await this.provider.getNetwork().then(n => n.chainId);\n  }\n  async getAccountContract() {\n    if (!this.accountContract) {\n      if (this.params.accountInfo?.abi) {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), this.params.accountInfo.abi);\n      } else {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), ACCOUNT_CORE_ABI);\n      }\n    }\n    return this.accountContract;\n  }\n  async getAccountInitCode() {\n    const factory = await this.getFactoryContract();\n    console.log(\"Deploying smart wallet via factory\");\n    const localSigner = await this.params.localSigner.getAddress();\n    const tx = await this.params.factoryInfo.createAccount(factory, localSigner);\n    try {\n      console.log(\"Cost to deploy smart wallet: \", (await tx.estimateGasCost()).ether, \"ETH\");\n    } catch (e) {\n      console.error(\"Cost to deploy smart wallet: unknown\", e);\n    }\n    return utils.hexConcat([factory.getAddress(), tx.encode()]);\n  }\n  async getFactoryContract() {\n    if (this.factoryContract) {\n      return this.factoryContract;\n    }\n    if (this.params.factoryInfo?.abi) {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress, this.params.factoryInfo.abi);\n    } else {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress);\n    }\n    return this.factoryContract;\n  }\n  async getCounterFactualAddress() {\n    if (this.params.accountAddress) {\n      return this.params.accountAddress;\n    }\n    const factory = await this.getFactoryContract();\n    const localSigner = await this.params.localSigner.getAddress();\n    return this.params.factoryInfo.getAccountAddress(factory, localSigner);\n  }\n  async getNonce() {\n    if (await this.checkAccountPhantom()) {\n      return BigNumber.from(0);\n    }\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.getNonce(accountContract);\n  }\n  async prepareExecute(target, value, data) {\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.execute(accountContract, target, value, data);\n  }\n  async prepareExecuteBatch(targets, values, datas) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.prepare(\"executeBatch\", [targets, values, datas]);\n  }\n  async signUserOpHash(userOpHash) {\n    return await this.params.localSigner.signMessage(utils.arrayify(userOpHash));\n  }\n  async isAcountDeployed() {\n    return !(await this.checkAccountPhantom());\n  }\n}\n\nclass SmartWalletConnector extends Connector {\n  constructor(config) {\n    super();\n    this.config = config;\n  }\n  async initialize(params) {\n    const config = this.config;\n    const originalProvider = getChainProvider(config.chain, {\n      clientId: config.clientId,\n      secretKey: config.secretKey\n    });\n    this.chainId = (await originalProvider.getNetwork()).chainId;\n    const bundlerUrl = this.config.bundlerUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const paymasterUrl = this.config.paymasterUrl || `https://${this.chainId}.bundler.thirdweb.com/v2`;\n    const entryPointAddress = config.entryPointAddress || ENTRYPOINT_ADDRESS;\n    const localSigner = await params.personalWallet.getSigner();\n    const providerConfig = {\n      chain: config.chain,\n      localSigner,\n      entryPointAddress,\n      bundlerUrl,\n      paymasterAPI: this.config.paymasterAPI ? this.config.paymasterAPI : getVerifyingPaymaster(paymasterUrl, entryPointAddress, this.config.clientId, this.config.secretKey),\n      gasless: config.gasless,\n      factoryAddress: config.factoryAddress,\n      accountAddress: params.accountAddress,\n      factoryInfo: config.factoryInfo || this.defaultFactoryInfo(),\n      accountInfo: config.accountInfo || this.defaultAccountInfo(),\n      clientId: config.clientId,\n      secretKey: config.secretKey\n    };\n    this.personalWallet = params.personalWallet;\n    const accountApi = new AccountAPI(providerConfig, originalProvider);\n    this.aaProvider = create4337Provider(providerConfig, accountApi, originalProvider, this.chainId);\n    this.accountApi = accountApi;\n  }\n  async connect(connectionArgs) {\n    await this.initialize(connectionArgs);\n    return await this.getAddress();\n  }\n  getProvider() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider);\n  }\n  async getSigner() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider.getSigner());\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const address = await this.getAddress();\n      return !!address;\n    } catch (e) {\n      return false;\n    }\n  }\n  async disconnect() {\n    this.personalWallet = undefined;\n    this.aaProvider = undefined;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    const currentChainId = (await provider.getNetwork()).chainId;\n    if (currentChainId !== chainId) {\n      // only throw if actually trying to switch chains\n      throw new Error(\"Not supported.\");\n    }\n  }\n  setupListeners() {\n    return Promise.resolve();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateChains(chains) {}\n\n  /**\n   * Check whether the connected signer can execute a given transaction using the smart wallet.\n   * @param transaction - The transaction to execute using the smart wallet.\n   * @returns whether the connected signer can execute the transaction using the smart wallet.\n   */\n  async hasPermissionToExecute(transaction) {\n    const accountContract = await this.getAccountContract();\n    const signer = await this.getSigner();\n    const signerAddress = await signer.getAddress();\n    const restrictions = (await accountContract.account.getAllSigners()).filter(item => ethers.utils.getAddress(item.signer) === ethers.utils.getAddress(signerAddress))[0]?.permissions;\n    if (!restrictions) {\n      return false;\n    }\n    return restrictions.approvedCallTargets.includes(transaction.getTarget());\n  }\n\n  /// PREPARED TRANSACTIONS\n\n  /**\n   * Send a single transaction without waiting for confirmations\n   * @param transaction - the transaction to send\n   * @param config - optional the transaction configuration\n   * @returns The awaitable transaction\n   */\n  async send(transaction, options) {\n    const signer = await this.getSigner();\n    return signer.sendTransaction({\n      to: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue()\n    }, options);\n  }\n\n  /**\n   * Execute a single transaction (waiting for confirmations)\n   * @param transaction - The transaction to execute\n   * @returns The transaction receipt\n   */\n  async execute(transaction, options) {\n    const tx = await this.send(transaction, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatch(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: tx.encode(),\n      value: 0\n    }, {\n      ...options,\n      batchData\n    });\n  }\n\n  /**\n   * Execute multiple transactions in a single batch\n   * @param transactions - The transactions to execute\n   * @returns The transaction receipt\n   */\n  async executeBatch(transactions, options) {\n    const tx = await this.sendBatch(transactions, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// RAW TRANSACTIONS\n\n  async sendRaw(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    return signer.sendTransaction(transaction, options);\n  }\n  async executeRaw(transaction, options) {\n    const tx = await this.sendRaw(transaction, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatchRaw(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const batch = await this.prepareBatchRaw(transactions);\n    return signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: batch.tx.encode(),\n      value: 0\n    }, {\n      ...options,\n      batchData: batch.batchData // batched tx flag\n    });\n  }\n  async executeBatchRaw(transactions, options) {\n    const tx = await this.sendBatchRaw(transactions, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// ESTIMATION\n\n  async estimate(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return this.estimateTx({\n      target: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue(),\n      gasLimit: await transaction.getOverrides().gasLimit,\n      maxFeePerGas: await transaction.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await transaction.getOverrides().maxPriorityFeePerGas,\n      nonce: await transaction.getOverrides().nonce\n    }, options);\n  }\n  async estimateRaw(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const tx = await ethers.utils.resolveProperties(transaction);\n    return this.estimateTx({\n      target: tx.to || constants.AddressZero,\n      data: tx.data?.toString() || \"\",\n      value: tx.value || BigNumber.from(0),\n      gasLimit: tx.gasLimit,\n      maxFeePerGas: tx.maxFeePerGas,\n      maxPriorityFeePerGas: tx.maxPriorityFeePerGas,\n      nonce: tx.nonce\n    }, options);\n  }\n  async estimateBatch(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue(),\n      gasLimit: await tx.getOverrides().gasLimit,\n      maxFeePerGas: await tx.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\n      nonce: await tx.getOverrides().nonce\n    }, {\n      ...options,\n      batchData\n    });\n  }\n  async estimateBatchRaw(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchRaw(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue(),\n      gasLimit: await tx.getOverrides().gasLimit,\n      maxFeePerGas: await tx.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\n      nonce: await tx.getOverrides().nonce\n    }, {\n      ...options,\n      batchData\n    });\n  }\n\n  //// DEPLOYMENT\n\n  /**\n   * Manually deploy the smart wallet contract. If already deployed this will throw an error.\n   * Note that this is not necessary as the smart wallet will be deployed automatically on the first transaction the user makes.\n   * @returns The transaction receipt\n   */\n  async deploy(options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const tx = await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: \"0x\"\n    }, {\n      ...options,\n      batchData: {\n        targets: [],\n        data: [],\n        values: []\n      } // batched tx flag to avoid hitting the Router fallback method\n    });\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /**\n   * Check if the smart wallet contract is deployed\n   * @returns true if the smart wallet contract is deployed\n   */\n  async isDeployed() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return await this.accountApi.isAcountDeployed();\n  }\n  async deployIfNeeded(options) {\n    const isDeployed = await this.isDeployed();\n    if (!isDeployed) {\n      await this.deploy(options);\n    }\n  }\n\n  //// PERMISSIONS\n\n  async grantPermissions(target, permissions) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantPermissions(target, permissions);\n  }\n  async revokePermissions(target) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAccess(target);\n  }\n  async addAdmin(target) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantAdminPermissions(target);\n  }\n  async removeAdmin(target) {\n    await this.deployIfNeeded();\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAdminPermissions(target);\n  }\n  async getAllActiveSigners() {\n    const isDeployed = await this.isDeployed();\n    if (isDeployed) {\n      const accountContract = await this.getAccountContract();\n      return accountContract.account.getAllAdminsAndSigners();\n    } else {\n      const personalWallet = await this.personalWallet?.getSigner();\n      if (!personalWallet) {\n        throw new Error(\"Personal wallet not connected\");\n      }\n      return [{\n        isAdmin: true,\n        signer: await personalWallet.getAddress(),\n        permissions: {\n          startDate: new Date(0),\n          expirationDate: new Date(0),\n          nativeTokenLimitPerTransaction: BigNumber.from(0),\n          approvedCallTargets: []\n        }\n      }];\n    }\n  }\n\n  /**\n   * Get the underlying account contract of the smart wallet.\n   * @returns The account contract of the smart wallet.\n   */\n  async getAccountContract() {\n    const isDeployed = await this.isDeployed();\n    if (!isDeployed) {\n      throw new Error(\"Account contract is not deployed yet. You can deploy it manually using SmartWallet.deploy(), or by executing a transaction from this wallet.\");\n    }\n    // getting a new instance everytime\n    // to avoid caching issues pre/post deployment\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.accountInfo?.abi) {\n      return sdk.getContract(await this.getAddress(), this.config.accountInfo.abi);\n    } else {\n      return sdk.getContract(await this.getAddress());\n    }\n  }\n\n  /**\n   * Get the underlying account factory contract of the smart wallet.\n   * @returns The account factory contract.\n   */\n  async getFactoryContract() {\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.factoryInfo?.abi) {\n      return sdk.getContract(this.config.factoryAddress, this.config.factoryInfo.abi);\n    }\n    return sdk.getContract(this.config.factoryAddress);\n  }\n  defaultFactoryInfo() {\n    return {\n      createAccount: async (factory, owner) => {\n        return factory.prepare(\"createAccount\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n      },\n      getAccountAddress: async (factory, owner) => {\n        return await factory.call(\"getAddress\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n      }\n    };\n  }\n  defaultAccountInfo() {\n    return {\n      execute: async (account, target, value, data) => {\n        return account.prepare(\"execute\", [target, value, data]);\n      },\n      getNonce: async account => {\n        return account.call(\"getNonce\", []);\n      }\n    };\n  }\n\n  /// PRIVATE METHODS\n\n  async estimateTx(tx, options) {\n    if (!this.accountApi || !this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    let deployGasLimit = BigNumber.from(0);\n    const [provider, isDeployed] = await Promise.all([this.getProvider(), this.isDeployed()]);\n    if (!isDeployed) {\n      deployGasLimit = await this.estimateDeploymentGasLimit();\n    }\n    const [userOp, gasPrice] = await Promise.all([this.accountApi.createUnsignedUserOp(this.aaProvider.httpRpcClient, tx, options), getGasPrice(provider)]);\n    const resolved = await utils.resolveProperties(userOp);\n    const transactionGasLimit = BigNumber.from(resolved.callGasLimit);\n    const transactionCost = transactionGasLimit.mul(gasPrice);\n    const deployCost = deployGasLimit.mul(gasPrice);\n    const totalCost = deployCost.add(transactionCost);\n    return {\n      ether: utils.formatEther(totalCost),\n      wei: totalCost,\n      details: {\n        deployGasLimit,\n        transactionGasLimit,\n        gasPrice,\n        transactionCost,\n        deployCost,\n        totalCost\n      }\n    };\n  }\n  async estimateDeploymentGasLimit() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const initCode = await this.accountApi.getInitCode();\n    const [initGas, verificationGasLimit] = await Promise.all([this.accountApi.estimateCreationGas(initCode), this.accountApi.getVerificationGasLimit()]);\n    return BigNumber.from(verificationGasLimit).add(initGas);\n  }\n  async prepareBatchRaw(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const resolvedTxs = await Promise.all(transactions.map(transaction => ethers.utils.resolveProperties(transaction)));\n    const targets = resolvedTxs.map(tx => tx.to || constants.AddressZero);\n    const data = resolvedTxs.map(tx => tx.data || \"0x\");\n    const values = resolvedTxs.map(tx => tx.value || BigNumber.from(0));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data,\n        values\n      }\n    };\n  }\n  async prepareBatchTx(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const targets = transactions.map(tx => tx.getTarget());\n    const data = transactions.map(tx => tx.encode());\n    const values = await Promise.all(transactions.map(tx => tx.getValue()));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data,\n        values\n      }\n    };\n  }\n}\n\nexport { SmartWalletConnector };\n"],"names":["isTwUrl","url","host","URL","hostname","endsWith","getValidPublicRPCUrl","chain","getValidChainRPCs","map","rpc","pathname","search","toString","e","async","hexlifyUserOp","op","userOp","utils","Object","keys","key","val","startsWith","reduce","set","_ref","k","v","randomNonce","hexString","generateRandomUint192","rand1","BigInt","Math","floor","random","rand2","rand3","rand4","rand5","rand6","length","BigNumber","from","PaymasterAPI","pkg","HttpRpcClient","constructor","bundlerUrl","entryPointAddress","chainId","clientId","secretKey","this","headers","bundleId","globalThis","APP_BUNDLE_ID","undefined","TW_AUTH_TOKEN","concat","TW_CLI_AUTH_TOKEN","window","bridge","userOpJsonRpcProvider","providers","name","initializing","validateChainId","send","bundlerChain","parseInt","Error","sendUserOpToBundler","userOp1","hexifiedUserOp","jsonRequestData","printUserOperation","estimateUserOpGas","method","VerifyingPaymasterAPI","paymasterUrl","entryPoint","super","getPaymasterAndData","response","fetch","body","JSON","stringify","jsonrpc","id","params","res","json","ok","error","statusText","code","status","result","paymasterAndData","_res$error","message","getVerifyingPaymaster","UserOperationEventListener","resolve","reject","sender","userOpHash","nonce","timeout","_defineProperty","boundLisener","listenerCallback","bind","start","filter","filters","UserOperationEvent","setTimeout","queryFilter","once","stop","off","_len","arguments","param","Array","_key","event","args","console","_this$nonce","log","transactionReceipt","getTransactionReceipt","success","extractFailureReason","resolved","receipt","revertReasonEvents","UserOperationRevertReason","blockHash","revertReason","decode","substring","ERC4337EthersSigner","Signer","config","originalSigner","erc4337provider","httpRpcClient","smartAccountAPI","sendTransaction","transaction","options","_tx$data","tx","ethers","verifyAllNecessaryFields","multidimensionalNonce","unsigned","createUnsignedUserOp","target","to","data","value","gasLimit","maxFeePerGas","maxPriorityFeePerGas","userOperation","signUserOp","transactionResponse","constructUserOpTransactionResponse","unwrapError","errorIn","errorMsg","_errorBody$error","_errorBody$error2","_failedOpMessage","errorBody","parse","errorStatus","errorCode","failedOpMessage","reason","includes","paymasterInfo","matched","match","split","stack","transactionRequest","connect","provider","getAddress","address","getSenderAccountAddress","signMessage","checkAccountPhantom","wait","signTransaction","_tx$data2","ERC4337EthersProvider","originalProvider","signer","getSigner","perform","getTransaction","transactionHash","Promise","getAccountAddress","waitForTransaction","confirmations","getUserOpHash","waitForUserOp","hash","callGasLimit","callData","initCode","detectNetwork","BaseAccountAPI","accountAddress","paymasterAPI","gasless","entryPointView","EntryPoint__factory","isPhantom","getCode","getInitCode","getAccountInitCode","getVerificationGasLimit","getNetwork","then","net","hashedUserOp","initCodeHash","callDataHash","verificationGasLimit","preVerificationGas","paymasterAndDataHash","encoded","encode","components","type","enc","getUserOpHashV06","senderAddress","getCounterFactualAddress","estimateCreationGas","deployerAddress","deployerCallData","estimateGas","info","_parseNumber","a","parseNumber","batchData","prepareExecute","feeData","getDynamicFeeData","_feeData$maxPriorityF","_feeData$maxFeePerGas","Celo","CeloAlfajoresTestnet","CeloBaklavaTestnet","all","getNonce","partialOp","signature","paymasterResult","estimates","unwrapBundlerError","paymasterResult2","signUserOpHash","getUserOpReceipt","interval","endtime","Date","now","events","_error$error","AccountAPI","sdk","ThirdwebSDK","fromPrivateKey","LOCAL_NODE_PKEY","supportedChains","getChainId","n","getAccountContract","_this$params$accountI","accountContract","accountInfo","abi","getContract","ACCOUNT_CORE_ABI","factory","getFactoryContract","localSigner","factoryInfo","createAccount","estimateGasCost","ether","_this$params$factoryI","factoryContract","factoryAddress","execute","prepareExecuteBatch","targets","values","datas","prepare","isAcountDeployed","SmartWalletConnector","Connector","initialize","getChainProvider","ENTRYPOINT_ADDRESS","personalWallet","providerConfig","defaultFactoryInfo","defaultAccountInfo","accountApi","aaProvider","create4337Provider","connectionArgs","getProvider","isConnected","disconnect","switchChain","setupListeners","updateChains","chains","hasPermissionToExecute","_await$accountContrac","signerAddress","restrictions","account","getAllSigners","item","permissions","approvedCallTargets","getTarget","getValue","sendBatch","transactions","prepareBatchTx","executeBatch","sendRaw","executeRaw","sendBatchRaw","batch","prepareBatchRaw","executeBatchRaw","estimate","estimateTx","getOverrides","estimateRaw","_tx$data3","constants","estimateBatch","estimateBatchRaw","deploy","isDeployed","deployIfNeeded","grantPermissions","revokePermissions","revokeAccess","addAdmin","grantAdminPermissions","removeAdmin","revokeAdminPermissions","getAllActiveSigners","getAllAdminsAndSigners","_this$personalWallet","isAdmin","startDate","expirationDate","nativeTokenLimitPerTransaction","_this$config$accountI","fromSigner","_this$config$factoryI","owner","call","deployGasLimit","estimateDeploymentGasLimit","gasPrice","getGasPrice","transactionGasLimit","transactionCost","mul","deployCost","totalCost","add","wei","details","initGas","resolvedTxs"],"sourceRoot":""}